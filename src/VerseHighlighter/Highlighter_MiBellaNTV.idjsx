// $#targetengine 'Highlighter_MiBellaNTV';

// SETTINGS
var DEBUG = false;
var DEFAULT_CSTYLE = '_scripture-highlight';
var MODIFIER = '-highlight';

if (DEBUG === true) {
    main();
}
else {
    app.doScript(main, ScriptLanguage.JAVASCRIPT, [], UndoModes.ENTIRE_SCRIPT, 'Toggle Verse Highlighting');
}

function main() {
    
    app.scriptPreferences.measurementUnit = MeasurementUnits.POINTS;
    
    var d = app.activeDocument;
    
    var sel = app.selection[0];
    
    if (sel.constructor.name != 'Text'
        && sel.constructor.name != 'Character'
        && sel.constructor.name != 'Word'
        && sel.constructor.name != 'TextStyleRange'
        && sel.constructor.name != 'Line'
        && sel.constructor.name != 'Paragraph') {
            alert('Select text and try again.');
            return;
    }
    
    var defaultStyle = d.characterStyles.itemByName(DEFAULT_CSTYLE);

    if (defaultStyle.isValid === false) {
        alert('The default highlight character style (' + DEFAULT_CSTYLE + ') does not seem to exist. Script will terminate.');
        return;
    }

    var coll = [] // This part because for a while I was collecting only all but the last
                  // textStyleRange. Now collecting all and then following up on final.
    for (var i = 0; i < sel.textStyleRanges.length; i += 1) {
        coll.push(sel.textStyleRanges[i])
    }
    processStylableObjects(coll);
    
    processFinalTSR(sel);

    sel.textStyleRanges[0].insertionPoints[0].select();
    

}

function processStylableObjects (objs) {
    var obj;
    for (var i = 0; i < objs.length; i += 1) {
        obj = objs[i];
        processStylableObject(obj)
    }
}

function processStylableObject (obj) {

    var newStyle

    newStyle = initializeStyle(obj)

    obj.appliedCharacterStyle = newStyle;

    if (newStyle.name === '[None]') {
        obj.clearOverrides();
    }

}

function initializeStyle (obj) {

    var origStyle, origStyleName, newStyle, newStyleName, defaultStyle;
    
    var d = app.activeDocument;
    defaultStyle = d.characterStyles.itemByName(DEFAULT_CSTYLE);

    origStyle = obj.appliedCharacterStyle;
    origStyleName = origStyle.name;

    newStyleName = getStyleName(origStyleName);
    newStyle = d.characterStyles.itemByName(newStyleName);
    if (newStyle.isValid) {
        return newStyle
    }
    newStyle = d.characterStyles.add();
    newStyle.name = newStyleName;
    newStyle.basedOn = obj.appliedCharacterStyle;
    newStyle.underline = defaultStyle.underline;
    newStyle.underlineColor = defaultStyle.underlineColor;
    newStyle.underlineOffset = defaultStyle.underlineOffset;
    newStyle.underlineWeight = defaultStyle.underlineWeight;
    
    alert('Created new character style (' + newStyle.name + '). Please adjust style properties as needed.' );
    
    return newStyle;

}

function getStyleName (origName) {

    var newName;
    var regExp = new RegExp(MODIFIER);
    if (origName === '[None]') {
        newName = DEFAULT_CSTYLE;
    }
    else {
        if (regExp.test(origName)) {
            if (origName === DEFAULT_CSTYLE) {
                newName = '[None]';
            }
            else {
                newName = origName.replace('-highlight', '');
            }
        }
        else {
            newName = origName + MODIFIER;
        }
    }
    return newName;
}

function processFinalTSR (sel) {

    var finalTSR = sel.textStyleRanges[sel.textStyleRanges.length-1];
    var finalSelChar = sel.characters[sel.characters.length-1];
    
    var c;
    var chars = [];
    var collect = false;
    for (var i = 0; i < finalTSR.characters.length; i += 1) {
        c = finalTSR.characters[i];
        if (collect === true) {
            chars.push(c);
        }
        if (c === finalSelChar) {
            collect = true;
        }
    }
    for (var i = 0; i < chars.length; i += 1) {
        processStylableObject(chars[i]);
    }
}
